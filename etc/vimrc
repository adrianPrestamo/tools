" rono.vim
"
" Copyright (2013) Ronoalado JLP (http://www.ronoaldo.net)
"
" Contribuições:
"   Filipe Peixoto (http://www.filipenos.net)
"
" Licença:
"   Creative Commons CC-BY-SA
"

" Instalação:
" $ wget http://code.ronoaldo.net/tools/raw/tip/etc/vimrc -O ~/.vimrc

" ********** Gestão de Plugins **********
filetype off

" ********** Auto-instalação do Vundle **********
" Ref: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
let g:vundle_installed=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle..."
  echo ""
  silent !mkdir ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  let g:vundle_installed=0
endif

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

" Plugins
Bundle 'gmarik/vundle'
Bundle 'snipMate'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'scrooloose/syntastic'
Bundle 'majutsushi/tagbar'
Bundle 'Blackrush/vim-gocode'
Bundle 'groenewege/vim-less'
Bundle 'https://bitbucket.org/ronoaldo/custom-vim-snippets'
Bundle 'velocity.vim'
Bundle 'tpope/vim-surround'
Bundle 'spf13/vim-colors'
Bundle 'flazz/vim-colorschemes'
Bundle 'javacomplete'
Bundle 'bling/vim-airline'
Bundle 'baskerville/bubblegum'
Bundle 'kien/ctrlp.vim'
Bundle 'mikelue/vim-maven-plugin'

" Bundle if in first setup
if g:vundle_installed == 0
  echo "Installing Bundles. Please ignore key map erros"
  echo ""
  :BundleInstall
endif

filetype plugin indent on

" ********** Funções **********

" Configurações de tabulação
" Tabs Normais
fu! SetupNormalTabs()
  setlocal sw=4 ts=4 st=4 noet si ai
endfu
" Tabs com 4 espaços
fu! SetupSpaceTabs()
  setlocal sw=4 ts=4 st=4 et si ai
endfu
" Tabs com 2 espaços
fu! Setup2SpaceTabs()
  setlocal sw=2 ts=2 st=2 et si ai
endfu

" ********** Funções Auxiliares **********

" Mensagens ao executar comandos demorados
fu! Info(msg)
  execute "echom '[ " . a:msg . " ]'"
endfu

" Mapeamento de atalhos conveniente
fu! KeyMap(key, action, insert_mode)
  execute "noremap  <silent> " . a:key . " " . a:action . "<CR>"
  execute "vnoremap <silent> " . a:key . " <C-C>" . a:action . "<CR>"
  if a:insert_mode
    execute "inoremap <silent> " . a:key . " <C-O>" . a:action . "<CR>"
  endif
endfu

" Abre uma janela temprária, opcionalmente limpando
" os valores atualmente existentes no mesmo buffer.
fu! TempWindow(name, clear) abort
  let name = substitute(a:name, "[^a-zA-Z0-9]", "_", "g")
  let bn = bufnr(name)
  if bn == -1
    execute "new " . name
    let bn = bufnr(name)
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    setlocal buflisted
  else
    let wn = bufwinnr(bn)
    if wn != -1
      exe wn . "wincmd w"
    else
      exe "split +buffer" . bn
    endif
  endif

  if a:clear
    normal gg
    normal dG
  endif
  wincmd J
endfu

" ********** Mercurial **********

fu! HgPull()
  call Info("Pulling changes from remote repository ...")
  !hg pull
endfu

fu! HgPush()
  call Info("Pushing changes to remote repository ...")
  !hg push
endfu

fu! HgDiff()
  call TempWindow("Mercurial Changes", 1)
  setfiletype diff
  execute 'silent r!hg diff --git'
  0
endfu

fu! Hg(...)
  call TempWindow('Mercurial', 1)
  let hg_cmd = 'silent r!hg '
  for s in a:000
    let hg_cmd = hg_cmd . ' ' . s
  endfor
  execute hg_cmd
  0
endfu

" **********  Maven **********

" Inicia o java debugger
fu! StartJdb(port)
  call Info("Starting jdb ... ")
  let jdb = "!jdb -sourcepath " . $PWD . "/src/main/java:" . $PWD . "/src/test/java"
  let jdb = jdb . " -port " . a:port
  execute jdb
endfu

" Setup de algumas opções padrão em um projeto maven.
fu! MvnConfigureWorkspace()
  let l:pom = findfile("pom.xml", ";")
  if filereadable(l:pom)
    let g:maven_project=1
    setlocal tags=./.tags;
    " Configura o NERDTree auto/open auto/close
    let g:nerdtree_tabs_smart_startup_focus=1
    let g:nerdtree_tabs_focus_on_files=1
    let g:nerdtree_tabs_open_on_console_startup=1
  endif
endfu

" Exuberant Ctags for current directory/project
fu! IndexProject()
  call Info("Indexing current directory ...")
  let ctags = "!rm -vf ./.tags && find ./ -type f |"
  let ctags = ctags . " xargs ctags -a -f ./.tags "
  let ctags = ctags . " -exclude='*/target/*' --exclude='*min.js'"
  let ctags = ctags . " -L - --totals"
  execute ctags

  setlocal tags=./.tags;
  echo "Tag path " . &tags
endfu

" Exuberant Ctags - para diretório g:default_java_workspace
fu! MvnIndexWorkspace()
  call Info("Atualizando tags em sua workspace ...")
  let ctags = "!rm -vf " . g:default_java_workspace . "/.tags &&"
  let ctags = ctags . " find " . g:default_java_workspace . " -type f -iname '*.java' |"
  let ctags = ctags . " xargs ctags -a -f ". g:default_java_workspace . "/.tags"
  let ctags = ctags . " --exclude='*/target/*'  -L - --totals"
  execute ctags

  setlocal tags=./.tags;
  echo "Tag path: " . &tags
endfu

" ******* Misc *********

" From http://vim.wikia.com/wiki/Find_files_in_subdirectories
" Find file in current directory and edit it.
function! Find(name)
  let l:list=system("find . -name '".a:name."' | perl -ne 'print \"$.\\t$_\"'")
  let l:num=strlen(substitute(l:list, "[^\n]", "", "g"))
  if l:num < 1
    echo "'".a:name."' not found"
    return
  endif
  if l:num != 1
    echo l:list
    let l:input=input("Which ? (CR=nothing)\n")
    if strlen(l:input)==0
      return
    endif
    if strlen(substitute(l:input, "[0-9]", "", "g"))>0
      echo "Not a number"
      return
    endif
    if l:input<1 || l:input>l:num
      echo "Out of range"
      return
    endif
    let l:line=matchstr("\n".l:list, "\n".l:input."\t[^\n]*")
  else
    let l:line=l:list
  endif
  let l:line=substitute(l:line, "^[^\t]*\t./", "", "")
  execute ":split ".l:line
endfunction

" ********** Workspace de Trabalho **********
" Mapeamentos de tipo de arquivo específico
augroup filemapping
  au!

  " Mapeamento de tabs por tipos especiais de arquivos
  " Python
  au BufRead,BufNewFile *.py call SetupSpaceTabs()
  au FileType python call SetupSpaceTabs()
  " Makefiles
  au BufRead,BufNewFile Makefile call SetupNormalTabs()
  au BufRead,BufNewFile makefile call SetupNormalTabs()
  " XML
  au BufRead,BufNewFile *.xml call SetupNormalTabs()
  au BufRead,BufNewFile *.xml setlocal shiftwidth=2 tabstop=2
  au FileType xml call SetupNormalTabs()
  au FileType xml setlocal shiftwidth=2 tabstop=2
  " TXT
  au BufRead,BufNewFile *.txt call Setup2SpaceTabs()
  " Velocity
  au BufRead,BufNewFile *.vm setlocal filetype=velocity
  " Vim
  au BufRead,BufNewFile *.vimrc call Setup2SpaceTabs()
  au BufRead,BufNewFile vimrc call Setup2SpaceTabs()
  au FileType vim call Setup2SpaceTabs()
  " Java
  au BufRead,BufNewFile *.java compiler javac
  au BufRead,BufNewFile *.java setlocal makeprg=javac\ %
  au BufRead,BufNewFile *.java let g:syntastic_java_javac_options = "-Xlint -encoding utf-8"
  au BufRead,BufNewFile *.java call SetupNormalTabs() | setlocal sw=2 ts=2
  " Bean shell
  au BufReadPost,BufNewFile *.bsh setlocal filetype=java

  " Go AppEngine support via 'goapp'
  if executable('goapp')
    au BufRead,BufNewFile *.go setlocal makeprg=goapp\ build
    au BufRead,BufNewFile *.go let g:syntastic_go_checkers=['goapp']
  else
    au BufRead,BufNewFile *.go setlocal makeprg=go\ build
    au BufRead,BufNewFile *.go let g:syntastic_go_checkers=['go']
  end

  " Conveniencia para revisar o diff antes do commit
  au BufRead /tmp/hg-editor-* call HgDiff()

  " Posiciona a janela QuickFix sempre na parte inferior da tela
  au FileType qf wincmd J
augroup END

" Configura ~/workspace para usar com o Java e Maven
let g:maven_auto_set_path=1
let g:default_java_workspace="~/workspace"
let g:java_autocomplete_enabled=1
augroup workspace
  au!
  let s:workspace_init = 1
  autocmd VimEnter * call MvnConfigureWorkspace()
  autocmd FileType java setlocal omnifunc=javacomplete#Complete
  autocmd FileType java setlocal completefunc=javacomplete#CompleteParamsInfo
  autocmd FileType java TagbarOpen
augroup END

" ********** Comandos **********
" Mercurial
command! HgDiff call HgDiff()
command! -nargs=+ Hg call Hg("<args>")
" Ctags
command! IndexWorkspace call MvnIndexWorkspace()
command! IndexProject call IndexProject()
" Maven
command! Build :Mvn clean package | redraw! | cw
command! Test :Mvn -o test -Dtest=%:t:r -DfailIfNoTests=true | redraw! | cw
command! TestAll :Mvn -o test | redraw! | cw
command! Install :Mvn -o clean insatll | redraw! | cw
command! Clean :Mvn -o clean | redraw
" Java Debugger
command! Debug call StartJdb(5005)

" Find
command! -nargs=1 Find :call Find("<args>")

" ********** Atalhos do Teclado **********

" Mapeia o \s para salvar o arquivo
call KeyMap('<Leader>s', ':update', 0)
" Mapeia o \x para fechar o arquivo
call KeyMap("<Leader>x", ":quitall", 0)
" Mapeamentos para o Mercurial
call KeyMap("<Leader>d", ":Debug", 0)
call KeyMap("<Leader>u", ":call HgPull()", 0)
call KeyMap("<Leader>p", ":call HgPush()", 0)
" Mapeamentos para desenvolvimento Java/Maven
call KeyMap("<Leader>i", ":Install", 0)
call KeyMap("<Leader>b", ":Build", 0)
call KeyMap("<Leader>t", "maven#run-unittest", 0)
" Mapeamentos para navegador de tags/arquivos
call KeyMap("<C-F11>", ":NERDTreeToggle", 1)
call KeyMap("<C-F10>", ":TagbarToggle", 1)
" Mapeia o equivalente do Eclipse (CTRL+SHIFT+F) para ':normal gg=G'
call KeyMap("<C-S-F>", ":normal gg=G", 1)
call KeyMap("<Leader>f", ":normal gg=G", 0)
" Alternativa para mudar de janelas, quando o CTRL+W não poder ser usado
call KeyMap("<Leader>w", ":wincmd W", 0)
" Redimensiona a janela usando leader+ e leader-
call KeyMap("<Leader>+", ":exe \"vertical resize \" . (winheight(0) * 3/2)<CR>", 0)
call KeyMap("<Leader>-", ":exe \"vertical resize \" . (winheight(0) * 2/3)<CR>", 0)
" Omnicomplete
inoremap <Leader>, <C-X><C-O>

" ********** Opções de genéricas **********

" Configurações padrão para usar no Vim/GVim
filetype on
set modeline
set modelines=5
set nomousehide
set nowrap
set number
set hlsearch
set sw=4 ts=4

" Tema/syntaxe
try
  colorscheme jellybeans
  let g:airline_theme='molokai'
catch
  echo "No colorscheme found for 'jellybeans'"
endtry
syntax on

" Mouse/scroll
set mouse=a
set scrolloff=2

" Status line
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=0
set laststatus=2

" Goodies with Syntastic
let g:syntastic_full_redraws=1
let g:syntastic_auto_loc_list=0

