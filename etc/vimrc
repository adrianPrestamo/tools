" ~/.vimrc
" Copyright (2013) Ronoalado JLP (http://www.ronoaldo.net)
" 
" Contribuições:
"   Filipe Peixoto (http://www.filipenos.net)
" Licença:
"   Creative Commons CC-BY-SA

" ********** Funções úteis **********

" Configurações de tabulação

" Tabs Normais
fu! SetupNormalTabs()
    set sw=8 ts=8 st=8 noet si ai
endfu

" Tabs com 4 espaços
fu! SetupSpaceTabs()
    set sw=4 ts=4 st=4 et si ai
endfu

" Tabs com 2 espaços
fu! Setup2SpaceTabs()
    set sw=2 ts=2 st=2 et si ai
endfu

" Mercurial
fu! HgPull()
  !hg pull
endfu

fu! HgPush()
  !hg push
endfu

fu! HgDiff()
  belowright split | enew | execute 'r!hg diff --git' | setfiletype diff
endfu

" Maven JUnit
fu! RunJunitForCurrentFile()
  let unit_test = expand('%:t:r')
	belowright split | enew 
  echo "Running junit test **" . unit_test . " ..."
  execute 'r!mvn -o -DskipTests=false -Dtest=**' . unit_test . ' -DfailIfNoTests=false test'
endfu

" Exuberant Ctags
fu! RunCTagsInWorkspace()
  echo "Indexing .tags file ..."
  !rm -vf ~/workspace/.tags && find ~/workspace/ -type f -iname '*.java' | xargs ctags -a -f ~/workspace/.tags  -L - --totals
  set tags=~/workspace/.tags
endfu

" Mapeamento de atalhos conveniente
fu! KeyMap(key, action)
  execute "noremap  <silent> " . a:key . " " . a:action . "<CR>"
  execute "vnoremap <silent> " . a:key . " <C-C>" . a:action . "<CR>"
  execute "inoremap <silent> " . a:key . " <C-O>" . a:action . "<CR>"
endfu

" ********** Gestão de Plugins **********

" pathogen.vim - Gerencia bundles para simplificar a manutenção de plugins
fu! InstallPathogen()
  echo "Instalando pathogen.vim ..."
  let wget="wget 'http://www.vim.org/scripts/download_script.php?src_id=19375' -O ~/.vim/autoload/pathogen.vim "
  let mkdirs="mkdir -p ~/.vim/{autoload,bundle}"
  execute "silent ! if [ \\! -f ~/.vim/autoload/pathogen.vim ] ; then " . mkdirs . " ; " . wget . " ; fi"
endfu

" Função auxiliar para instalar o plugin do vim com base em seu nome e id de download
fu! InstallVimPlugin(name, downloadid)
  call InstallPathogen()
  echo "Instalando plugind id " . a:name . ", r=" . a:downloadid
  
  let url="http://www.vim.org/scripts/download_script.php?src_id=" . a:downloadid
  let wget="wget -c '" . url . "' -O /tmp/" . a:downloadid . ".zip"
  let unzip="unzip /tmp/" . a:downloadid . ".zip -d ~/.vim/bundle/" . a:name
  
  execute "silent ! if [ \\! -d ~/.vim/bundle/" . a:name . " ] ; then "  . wget . " && " . unzip . " ; fi"
endfu

" snipmate.vim - Code templates
fu! InstallSnipmate()
  call InstallPathogen()
  let wget="wget -c 'https://github.com/csexton/snipmate.vim/archive/master.zip' -O /tmp/snipmate.zip"
  let unzip="unzip /tmp/snipmate.zip -d $HOME/.vim/bundle"
  execute "silent ! if [ \\! -d ~/.vim/bundle/snipmate.vim-master ] ; then " . wget . " ; " . unzip . " ; fi"
endfu 

" jcomplete.vim - Autocomplete para a JDK
fu! InstallJComplete()
  call InstallVimPlugin("jcomplete", "14914")
endfu

" taglist.vim - Outline do código
fu! InstallTagList()
  call InstallVimPlugin("taglist", "19574")
endfu

" nerdtree.vim - Filebrowser
fu! InstallNerdTree()
  call InstallVimPlugin("nerdtree", "17123")
endfu

" Setup para instalar todos os plugins por padrão
fu! InstallAllPlugins()
  call InstallSnipmate()
  call InstallJComplete()
  call InstallTagList()
  call InstallNerdTree()
endfu

" lazyness - atalhos para digitar menos
command Review call HgDiff()
command Junit call RunJunitForCurrentFile()
command Gwtc !mvn -o gwt:compile
command IndexWorkspace call RunCTagsInWorkspace()
command Outline TlistToggle
command MakeAndFix make! | cw

" ********** Workspace de Trabalho **********

" Carrega o pathogen, silenciosamente.
silent call pathogen#infect()

" Tabulação padrão com \t
call SetupNormalTabs()

" Mapeamento de tipos de arquivo especiais
au BufRead,BufNewFile *.bsh call setfiletype java

" Mapeamento de tabs por tipos especiais de arquivos
au BufRead,BufNewFile *.py call SetupSpaceTabs()
au BufRead,BufNewFile Makefile call SetupNormalTabs()
au BufRead,BufNewFile makefile call SetupNormalTabs()
au BufRead,BufNewFile *.xml call SetupNormalTabs()
au BufRead,BufNewFile *.txt call Setup2SpaceTabs()
au BufRead,BufNewFile *.vimrc call Setup2SpaceTabs()
au BufRead,BufNewFile vimrc call Setup2SpaceTabs()
au BufRead,BufNewFile *.java compiler javac
au BufRead,BufNewFile *.java set makeprg=javac\ %
au BufRead,BufNewFile *.java set omnifunc=javacomplete#Complete

" Configura ~/workspace para usar com o Maven
augroup workspace
  if !exists("s:workspace_init")
    let s:workspace_init = 1
    autocmd BufNewFile,BufRead */workspace/* cd <afile>:~:s?\~/workspace/\([^/]\+\)/.*?\~/workspace/\1?
    autocmd BufNewFile,BufRead */workspace/* compiler ant
    autocmd BufNewFile,BufRead */workspace/* set makeprg=mvn\ -q\ -o\ test-compile\ -f\ ./pom.xml
    autocmd BufNewFile,BufRead */workspace/* set errorformat=\[ERROR]\ %f:[%l\\,%v]\ %m
    autocmd BufNewFile,BufRead */workspace/* call KeyMap("<C-F11>", ":start mvn -f pom.xml appengine:devserver")
    " Configura o taglist como Overview
    let Tlist_Use_Right_Window = 1
    autocmd BufNewFile,BufRead */workspace/* set tags=~/workspace/.tags
  endif
augroup END

" ********** Atalhos do Teclado **********

" Mapeia o CTRL+S para salvar o arquivo
call KeyMap('<C-S>', ':update')
call KeyMap("<C-P>", ":call HgPull()")
call KeyMap("<C-U>", ":call HgPush()")
call KeyMap("<C-F8>", ":MakeAndFix")
call KeyMap("<C-F12>", ":NERDTreeToggle<CR>:TlistToggle")

" Configura o fechamento automatico
imap { {}<left>
imap ( ()<left>
imap [ []<left>

" ********** Opções de genéricas **********

" Configurações padrão para usar no Vim/GVim
filetype on
syntax on
set modeline
set modelines=5
set nomousehide
set wrap
set number
set hlsearch
set mouse=a
