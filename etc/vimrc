" ~/.vimrc
" Copyright (2013) Ronoalado JLP (http://www.ronoaldo.net)
" 
" Contribuições:
"   Filipe Peixoto (http://www.filipenos.net)
" Licença:
"   Creative Commons CC-BY-SA

" ********** Gestão de Plugins **********

" Instale com os comandos
" $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" $ vim +BundleInstall +qall

filetype off

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'snipMate'
Bundle 'scrooloose/nerdtree'
Bundle 'taglist.vim'

filetype plugin indent on

" ********** Funções **********

" Configurações de tabulação

" Tabs Normais
fu! SetupNormalTabs()
    set sw=8 ts=8 st=8 noet si ai
endfu

" Tabs com 4 espaços
fu! SetupSpaceTabs()
    set sw=4 ts=4 st=4 et si ai
endfu

" Tabs com 2 espaços
fu! Setup2SpaceTabs()
    set sw=2 ts=2 st=2 et si ai
endfu

" Abre uma janela temprária, opcionalmente limpando
" os valores atualmente existentes no mesmo buffer.
fu! OpenTempWindow(name, clear) abort
  let name = substitute(a:name, "[^a-zA-Z0-9]", "_", "g")
  let bn = bufnr(name)
  if bn == -1
    execute "new " . name
    let bn = bufnr(name)
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    setlocal buflisted
  else
    let wn = bufwinnr(bn)
    if wn != -1
      exe wn . "wincmd w"
    else
      exe "split +buffer" . bn
    endif
  endif

  if a:clear
    normal gg
    normal dG
  endif
  wincmd J
endfu

" Mercurial
fu! HgPull()
  !hg pull
endfu

fu! HgPush()
  !hg push
endfu

fu! HgDiff()
  call OpenTempWindow("Mercurial Changes", 1)
  setfiletype diff
  execute 'r!hg diff --git'
  0
endfu

" Maven JUnit
fu! RunJunitForCurrentFile()
  let unit_test = expand('%:t:r')
  
  if unit_test !~ "Test$"
    let unit_test = unit_test . "Test"
  endif

  call OpenTempWindow("Junit Reports", 1)
  
  echom "Running junit test **" . unit_test . " ..."
  let junit = 'r!mvn -o -DskipTests=false -Dtest=**' . unit_test
  let junit = junit . ' -DfailIfNoTests=false test'
  execute junit
endfu

" Exuberant Ctags
fu! RunCTagsInWorkspace()
  echom "Indexing .tags file ..."
  let ctags = "!rm -vf ~/workspace/.tags && find ~/workspace/ -type f -iname '*.java' |"
  let ctags = ctag . " xargs ctags -a -f ~/workspace/.tags  -L - --totals"
  execute ctags

  set tags=~/workspace/.tags
  echom "Tag path: " . &tags
endfu

" Mapeamento de atalhos conveniente
fu! KeyMap(key, action)
  execute "noremap  <silent> " . a:key . " " . a:action . "<CR>"
  execute "vnoremap <silent> " . a:key . " <C-C>" . a:action . "<CR>"
  execute "inoremap <silent> " . a:key . " <C-O>" . a:action . "<CR>"
endfu

" Inicia o java debugger
fu! StartJdb(port)
  let jdb = "!jdb -sourcepath " . $PWD . "/src/main/java:" . $PWD . "/src/test/java"
  let jdb = jdb . " -port " . a:port
  execute jdb
endfu

" lazyness - atalhos para digitar menos
command Review call HgDiff()
command Gwtc !mvn -o gwt:compile
command IndexWorkspace call RunCTagsInWorkspace()

command Build make! | cw
command Test  call RunJunitForCurrentFile()
command Debug call StartJdb(5005)

" ********** Workspace de Trabalho **********

" Tabulação padrão com \t
call SetupNormalTabs()

" Mapeamentos para o teclado
augroup filemapping
  au!
  " Mapeamento de tipos de arquivo especiais
  au BufRead,BufNewFile *.bsh call setfiletype java

  " Mapeamento de tabs por tipos especiais de arquivos
  au BufRead,BufNewFile *.py call SetupSpaceTabs()
  au BufRead,BufNewFile Makefile call SetupNormalTabs()
  au BufRead,BufNewFile makefile call SetupNormalTabs()
  au BufRead,BufNewFile *.xml call SetupNormalTabs()
  au BufRead,BufNewFile *.txt call Setup2SpaceTabs()
  au BufRead,BufNewFile *.vimrc call Setup2SpaceTabs()
  au BufRead,BufNewFile vimrc call Setup2SpaceTabs()
  au BufRead,BufNewFile *.java compiler javac
  au BufRead,BufNewFile *.java set makeprg=javac\ %
  au BufRead,BufNewFile *.java set omnifunc=javacomplete#Complete

  " Conveniencia para revisar o diff antes do commit
  au BufRead /tmp/hg-editor-* call HgDiff()

  " Posiciona a janela QuickFix sempre na parte inferior da tela
  au FileType qf wincmd J
augroup END

" Configura ~/workspace para usar com o Maven
augroup workspace
  au!
  let s:workspace_init = 1
  autocmd BufNewFile,BufRead */workspace/* cd <afile>:~:s?\~/workspace/\([^/]\+\)/.*?\~/workspace/\1?
  autocmd BufNewFile,BufRead */workspace/* compiler ant
  autocmd BufNewFile,BufRead */workspace/* set makeprg=mvn\ -q\ -o\ test-compile\ -f\ ./pom.xml
  autocmd BufNewFile,BufRead */workspace/* set errorformat=\[ERROR]\ %f:[%l\\,%v]\ %m
  " Configura o taglist como Overview
  let Tlist_Use_Right_Window = 1
  autocmd BufNewFile,BufRead */workspace/* set tags=~/workspace/.tags
augroup END

" ********** Atalhos do Teclado **********

" Mapeia o CTRL+S para salvar o arquivo
call KeyMap('<C-S>', ':update')
" Mapeia o CTRL+X para fechar o arquivo
call KeyMap("<C-X>", ":quitall")
" Mapeamentos para o Mercurial
call KeyMap("<C-P>", ":call HgPull()")
call KeyMap("<C-U>", ":call HgPush()")
" Mapeamentos para desenvolvimento Java
call KeyMap("<C-F8>", ":Build")
call KeyMap("<C-F9>", ":Test")
call KeyMap("<C-F10>", ":Debug")
" Mapeamentos para navegador de tags/arquivos
call KeyMap("<C-F11>", ":NERDTreeToggle")
call KeyMap("<C-F12>", ":TlistToggle")

" Configura o fechamento automatico
inoremap { {}<left>
inoremap ( ()<left>
inoremap [ []<left>

" ********** Opções de genéricas **********

" Configurações padrão para usar no Vim/GVim
filetype on
syntax on
set modeline
set modelines=5
set nomousehide
set wrap
set number
set hlsearch
set mouse=a
