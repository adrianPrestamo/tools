" rono.vim
"
" Copyright (2013) Ronoalado JLP (http://www.ronoaldo.net)
" 
" Contribuições:
"   Filipe Peixoto (http://www.filipenos.net)
" 
" Licença:
"   Creative Commons CC-BY-SA
"

" Instalação:
" $ wget http://code.ronoaldo.net/ronoaldo-utils/raw/tip/etc/vimrc -O ~/.vim/plugin/rono.vim
" $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" $ vim +BundleInstall +qall

" ********** Gestão de Plugins **********
filetype off

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'snipMate'
Bundle 'scrooloose/nerdtree'
Bundle 'taglist.vim'

filetype plugin indent on

" ********** Funções **********

" Configurações de tabulação
" Tabs Normais
fu! SetupNormalTabs()
  set sw=8 ts=8 st=8 noet si ai
endfu
" Tabs com 4 espaços
fu! SetupSpaceTabs()
  set sw=4 ts=4 st=4 et si ai
endfu
" Tabs com 2 espaços
fu! Setup2SpaceTabs()
  set sw=2 ts=2 st=2 et si ai
endfu

" ********** Funções Auxiliares **********

" Mensagens ao executar comandos demorados
fu! Info(msg)
  execute "echom '[ " . a:msg . " ]'"
endfu

" Mapeamento de atalhos conveniente
fu! KeyMap(key, action)
  execute "noremap  <silent> " . a:key . " " . a:action . "<CR>"
  execute "vnoremap <silent> " . a:key . " <C-C>" . a:action . "<CR>"
  execute "inoremap <silent> " . a:key . " <C-O>" . a:action . "<CR>"
endfu

" Abre uma janela temprária, opcionalmente limpando
" os valores atualmente existentes no mesmo buffer.
fu! TempWindow(name, clear) abort
  let name = substitute(a:name, "[^a-zA-Z0-9]", "_", "g")
  let bn = bufnr(name)
  if bn == -1
    execute "new " . name
    let bn = bufnr(name)
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    setlocal buflisted
  else
    let wn = bufwinnr(bn)
    if wn != -1
      exe wn . "wincmd w"
    else
      exe "split +buffer" . bn
    endif
  endif

  if a:clear
    normal gg
    normal dG
  endif
  wincmd J
endfu

" ********** Mercurial **********

fu! HgPull()
  call Info("Pulling changes from remote repository ...")
  !hg pull
endfu

fu! HgPush()
  call Info("Pushing changes to remote repository ...")
  !hg push
endfu

fu! HgDiff()
  call TempWindow("Mercurial Changes", 1)
  setfiletype diff
  execute 'silent r!hg diff --git'
  0
endfu

" **********  Maven **********

" Maven Install
fu! MvnInstall()
  call Info("Building and installing artifacts ...")
  call TempWindow("Maven", 1)
  execute "silent r!mvn -o clean install"
  0
endfu

" Maven find project directory
fu! MvnMoveToProjectDir()
  let l:pom = findfile("pom.xml", ";")
  if filereadable(l:pom)
    let l:project = fnamemodify(l:pom, ":h")
    execute "cd " . l:project
  else
    cd <afile>:~:s?\~/workspace/\([^/]\+\)/.*?\~/workspace/\1?
  endif
endfu

" Maven JUnit
fu! MvnSurefireForCurrentFile()
  let unit_test = expand('%:t:r')
  if unit_test !~ "Test$"
    let unit_test = unit_test . "Test"
  endif

  call Info("Junit test **" . unit_test . " ...")
  call TempWindow("Maven", 1)

  let junit = 'silent 0r!mvn -o -DskipTests=false -Dtest=**' . unit_test
  let junit = junit . ' -DfailIfNoTests=false test'
  silent execute junit
  execute "silent! normal /^Results\<CR>"
endfu

" Exuberant Ctags
fu! MvnIndexWorkspace()
  call Info("Indexing .tags file ...")
  let ctags = "!rm -vf ~/workspace/.tags && find ~/workspace/ -type f -iname '*.java' |"
  let ctags = ctags . " xargs ctags -a -f ~/workspace/.tags  -L - --totals"
  execute ctags

  set tags=~/workspace/.tags
  echo "Tag path: " . &tags
endfu

" Inicia o java debugger
fu! StartJdb(port)
  call Info("Starting jdb ... ")
  let jdb = "!jdb -sourcepath " . $PWD . "/src/main/java:" . $PWD . "/src/test/java"
  let jdb = jdb . " -port " . a:port
  execute jdb
endfu

" Configura a workspace
fu! MvnConfigureWorkspace()
  call MvnMoveToProjectDir()
  compiler ant
  set makeprg=mvn\ -q\ -o\ test-compile\ -f\ ./pom.xml
  set errorformat=\[ERROR]\ %f:[%l\\,%v]\ %m
  set tags=~/workspace/.tags
  let Tlist_Use_Right_Window = 1
endfu

" ********** Comandos **********

command! Review call HgDiff()
command! Gwtc !mvn -o gwt:compile
command! IndexWorkspace call MvnIndexWorkspace()

command! Build make! | cw
command! Test  call MvnSurefireForCurrentFile()
command! Debug call StartJdb(5005)
command! Install call MvnInstall()

" ********** Workspace de Trabalho **********

" Tabulação padrão com \t
call SetupNormalTabs()

" Mapeamentos de tipo de arquivo específico
augroup filemapping
  au!
  " Mapeamento de tipos de arquivo especiais
  au BufRead,BufNewFile *.bsh set filetype=java

  " Mapeamento de tabs por tipos especiais de arquivos
  au BufRead,BufNewFile *.py call SetupSpaceTabs()
  au FileType python call SetupSpaceTabs()
  au BufRead,BufNewFile Makefile call SetupNormalTabs()
  au BufRead,BufNewFile makefile call SetupNormalTabs()
  au BufRead,BufNewFile *.xml call SetupNormalTabs()
  au FileType xml call SetupNormalTabs()
  au BufRead,BufNewFile *.txt call Setup2SpaceTabs()
  au BufRead,BufNewFile *.vimrc call Setup2SpaceTabs()
  au BufRead,BufNewFile vimrc call Setup2SpaceTabs()
  au FileType vim call Setup2SpaceTabs()
  au BufRead,BufNewFile *.java compiler javac
  au BufRead,BufNewFile *.java set makeprg=javac\ %

  " Conveniencia para revisar o diff antes do commit
  au BufRead /tmp/hg-editor-* call HgDiff()

  " Posiciona a janela QuickFix sempre na parte inferior da tela
  au FileType qf wincmd J
augroup END

" Configura ~/workspace para usar com o Maven
augroup workspace
  au!
  let s:workspace_init = 1
  autocmd BufNewFile,BufRead ~/workspace/* call MvnConfigureWorkspace()
augroup END

" ********** Atalhos do Teclado **********

" Mapeia o CTRL+S para salvar o arquivo
call KeyMap('<C-S>', ':update')
" Mapeia o CTRL+X para fechar o arquivo
call KeyMap("<C-X>", ":quitall")
" Mapeamentos para o Mercurial
call KeyMap("<C-U>", ":call HgPull()")
call KeyMap("<C-P>", ":call HgPush()")
" Mapeamentos para desenvolvimento Java
call KeyMap("<C-F7>", ":Install")
call KeyMap("<C-F8>", ":Build")
call KeyMap("<C-F9>", ":Test")
call KeyMap("<C-F10>", ":Debug")
" Mapeamentos para navegador de tags/arquivos
call KeyMap("<C-F11>", ":NERDTreeToggle")
call KeyMap("<C-F12>", ":TlistToggle")
" Mapeia o equivalente do Eclipse (CTRL+SHIFT+F) para ':normal gg=G'
call KeyMap("<C-S-F>", ":normal gg=G")

" Configura o fechamento automatico
inoremap { {}<left>
inoremap ( ()<left>
inoremap [ []<left>

" ********** Opções de genéricas **********

" Configurações padrão para usar no Vim/GVim
filetype on
syntax on
set modeline
set modelines=5
set nomousehide
set wrap
set number
set hlsearch
set mouse=a
