#!/bin/bash
# Copyright 2013 Ronoaldo JLP (http://www.ronoaldo.net)
# 
#   Licensed under the Apache License, Version 2.0 (the 'License');
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an 'AS IS' BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Easy way to build a linux kernel on Debian
#
# Copyright (C) 2013 Ronoaldo JLP <ronoaldo@gmail.com>

set -e

# Allows configuration of default 'run as sudo' command.
export SUDO="${SUDO:-sudo}"
export KVER="latest"
export BUILD="1"
export LOG="$PWD/linux-$(date +%Y%d%m-%H%M%S).log"

# Print a information message
info() {
	echo "[ INFO] $*"
}

# Print a warning message
warn() {
	echo "[ WARN] $*"
}

# Print an error message
error() {
	echo "[ERROR] $*"
}

# Prompts the user for a question, and check if 
# the answer is yes.
# 
# returns 0 if yes, 1 if no
confirm() {
	read -p"$* (y|n) " answer
	case "$answer" in
		[yY][eE][sS]|[yY]) return 0 ;;
		*) return 1;;
	esac
}

# Check the package instalation status
# 
# returns 0 if properly installed, 1 otherwise
is_pkg_installed() {
	dpkg --status $1 | grep -q "install ok installed" 2>/dev/null
	return $?
}

# Install all build dependencies for the kernel, that aren't
# installed yet.
install_build_dependencies() {
	export to_install=""
	for pkg in kernel-package fakeroot libncurses5-dev ; do
		if ! is_pkg_installed "$pkg" ; then
			export to_install="$to_install $pkg"
		fi
	done
	if [ ! -z "$to_install" ] ; then
		info "Installing build dependencies '$to_install' ..."
		$SUDO apt-get install $to_install
	fi
}

fetch_kernel() {
	if [ ! -f linux-$KVER.tar.xz ] ; then
		info "Downloading kernel sources ..."
		case $KVER in
			3*)
				wget -c "http://www.kernel.org/pub/linux/kernel/v3.x/linux-$KVER.tar.xz"
				;;
			4*)
				wget -c "http://www.kernel.org/pub/linux/kernel/v4.x/linux-$KVER.tar.xz"
				;;
			*)
				echo "Unsuported version: $KVER"
		esac
	fi
}

unpack_kernel() {
	if [ -d linux-$KVER ] ; then
		info "Linux kernel already unpacked."
		return 0
	fi
	info "Unpacking kernel sources ..."
	tar xf linux-$KVER.tar.xz
}

check_current_config() {
	if [ -f .config ] ; then
		if confirm "Overwrite .config ?" ; then
			echo "Backing up current .config as ../config-$(date +%Y%m%d-%H%M%S)"
		else
			exit 2
		fi
	fi
}

# Performs a "safe configuration" for the new kernel, based on the
# current one.
safe_config() {
	check_current_config
	info "Performing safe configuration, based on running kernel config ..."
	info "> make olddefconfig"
	yes "" | make olddefconfig
	info "Configuration done. Review linux-$KVER/config to see what was chosen."
	
	if confirm "Do you want to run make menuconfig to do manual settings?" ; then
		make menuconfig
	fi
}

# Configures built-in for current loaded modules using local config,
# then makes all new/optional stuff as modules
optimized_config() {
	check_current_config
	
	info "Performing an optimized configuration. This is experimental!!!"
	info "You should have all hardware you want to use pluged, so the current"
	info "kernel will load the modules and they will be included in this build."

	cp /boot/config-$( uname -r ) .config -v
	make localmodconfig
	info "Configuration done. Review linux-$KVER/.config to see what was chosen."
	
	if confirm "Do you want to run make menuconfig to do manual settings?" ; then
		make menuconfig
	fi
}

local_version() {
	VERSION="$(grep "CONFIG_LOCALVERSION=" .config | cut -f 2 -d '=' | sed -e 's;-;+;g' |\
		sed -e 's;";;g' | sed -e 's;^+;;g')"
	if [ ! -z "$VERSION" ] ; then
		echo "$VERSION~"
	else
		echo ""
	fi
}

# Starts the kernel build process
build_packages() {
	case $KVER in
		*-*)
			REV="${KVER/-/\~}~$(local_version)custom$BUILD"
			;;
		*)
			REV="$KVER~$(local_version)custom$BUILD"
			;;
	esac
	
	info "Your kernel will be compiled now."
	info "You may want to take one coffee. Or maybe two ..."
	info "Your kernel revision will be $REV"
	
	LOG="linux-image-$REV.build"
	TIME="linux-image-$REV.build.time"

	/usr/bin/time -p --output "$TIME" --append \
		fakeroot make-kpkg --initrd --revision="$REV" \
		$BUILD_ARGS binary-arch 2>&1 | tee $LOG
}

usage() {
	cat <<EOF
Usage $0 [OPTIONS]

Where OPTIONS can be:
	--kernel-version|-k
		Configures the kernel version (default=$KVER)
	--fast
		Enable multiple jobs in parallel. $(grep -c '^processor' /proc/cpuinfo) jobs
	--build-number|-b
		Enables a specific build number after 
		"~custom" on kernel package revision
	--safe-config
		Try to safely configure the kernel
	--optimal-config
		Try to make an optimized kernel configuration.
		You must have all modules loaded to help the configuration
		guess the right modules to include.
	--help
		Prints this help and ext
EOF
}

### Main ###

# Quick help
case $@ in --help|-h|-?) usage ; exit 1 ;; esac

# Parses the CLI options and configurations.
while [ $# -gt 0 ] ; do
	case $1 in
		--kernel-version|-k)
			shift
			export KVER="$1"
			info "Setting kernel version to $KVER"
		;;

		--fast)
			warn "Building with maximal usage of CPU!"
			export BUILD_ARGS="$BUILD_ARGS -j $(grep -c '^processor' /proc/cpuinfo)"
		;;

		--safe-config)
			info "Will perform safe-config"
			export SAFE_CONFIG=true
		;;
		--optimized-config|--optimal-config)
			info "Will perform optimized-config"
			export OPTIMIZED_CONFIG=true
		;;
		--build-number|-b)
			shift
			info "Build number is $1"
			export BUILD="$1"
		;;
		*)
			echo "Unknown argument '$1'"
			usage
			exit 1
		;;
	esac
	shift
done

case $KVER in
	latest)
		info "Guessing latest stable kernel version ..."
		KVER="$(wget -o/dev/null -O - 'http://www.kernel.org/' | \
			sed -n '/stable:/{n;p;}' | head -n 1  | \
			sed -rn 's/.*>([0-9.]+)<.*/\1/p' )"
		export KVER
	;;
esac

# Configure and build
info "Building linux kernel version $KVER ..."

install_build_dependencies
fetch_kernel
unpack_kernel

cd linux-$KVER
if [ ! -z $SAFE_CONFIG ] ; then
	safe_config
elif [ ! -z $OPTIMIZED_CONFIG ] ; then
	optimized_config
fi
build_packages
