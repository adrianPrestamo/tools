#!/bin/bash
# Copyright 2013 Ronoaldo JLP (http://www.ronoaldo.net)
# 
#   Licensed under the Apache License, Version 2.0 (the 'License');
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an 'AS IS' BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Easy way to build a linux kernel on Debian
#
# Copyright (C) 2013-2020 Ronoaldo JLP <ronoaldo@gmail.com>

# Be safe
set -e

# Allows configuration of default 'run as sudo' command.
export SUDO="${SUDO:-sudo}"
export KVER="latest"
export BUILD="1"
export LOG="$PWD/linux-$(date +%Y%d%m-%H%M%S).log"

export COLOR_GREEN='\033[0;32m'
export COLOR_YELLOW='\033[1;33m'
export COLOR_RED='\033[0;31m'
export COLOR_NONE='\033[0m'

# Print a information message
info() {
	echo -e "${COLOR_GREEN}[ INFO] $* ${COLOR_NONE}"
}

# Print a warning message
warn() {
	echo -e "${COLOR_YELLOW}[ WARN] $* ${COLOR_NONE}"
}

# Print an error message
error() {
	echo -e "${COLOR_RED}[ERROR] $* ${COLOR_NONE}"
}

# Prompts the user for a question, and check if 
# the answer is yes.
# 
# returns 0 if yes, 1 if no
confirm() {
	read -p"$* (y|n) " answer
	case "$answer" in
		[yY][eE][sS]|[yY]) return 0 ;;
		*) return 1;;
	esac
}

# Check the package instalation status
# 
# returns 0 if properly installed, 1 otherwise
is_pkg_installed() {
	dpkg --status $1 2>&1 | grep -q "install ok installed" 2>/dev/null
	return $?
}

# Install all build dependencies for the kernel, that aren't
# installed yet.
install_build_dependencies() {
	export to_install=""
	for pkg in time gnupg2 build-essential fakeroot ; do
		if ! is_pkg_installed "$pkg" ; then
			export to_install="$to_install $pkg"
		fi
	done
	if [ ! -z "$to_install" ] ; then
		info "Installing extra build dependencies '$to_install' ..."
		$SUDO apt-get install $to_install
	fi
	info "Checking if build-deps are up-to-date ..."
	$SUDO apt-get build-dep linux
}

fetch_kernel() {
	export MAJOR=""
	case $KVER in
		5*)
			export MAJOR=v5.x
			;;
		*)
			echo "Unsuported version: $KVER (Major versions supported are 3.x, 4.x and 5.x"
			exit 1
	esac
	info "Downloading kernel sources for $MAJOR line ($KVER) ... "
	wget -c "http://www.kernel.org/pub/linux/kernel/$MAJOR/linux-$KVER.tar.xz"
	wget -c "http://www.kernel.org/pub/linux/kernel/$MAJOR/linux-$KVER.tar.sign"
	info "Verifying archive integrity... "
	unxz -c linux-$KVER.tar.xz | gpg --verify linux-$KVER.tar.sign - || exit 2
	info "Archive downloaded and integrity is good to go!"
}

unpack_kernel() {
	if [ -d linux-$KVER ] ; then
		info "Linux kernel already unpacked."
		return 0
	fi
	info "Unpacking kernel sources ..."
	tar xf linux-$KVER.tar.xz
}

backup_current_config() {
	if [ -f .config ] ; then
		bak="../linux-$KVER.config-$(date +%Y%m%d-%H%M%S)"
		info "Backing up current .config as $bak"
		cp -v .config $bak
	fi
}

check_current_config() {
	if [ -f .config ] ; then
		backup_current_config
	fi
}

run_make_menuconfig() {
	info "Review linux-$KVER/config to confirm the build configuration."
	[ -f /boot/config-$(uname -r ) ] && {
		info "These are the changes from the running kernel: "
		scripts/diffconfig /boot/config-$(uname -r) .config
		echo
	}
	if ! confirm "Continue with the current running config? Answer 'no' to configure more options with 'make menuconfig'" ; then
		make menuconfig
	fi
}

# Performs a "safe configuration" for the new kernel, based on the
# current one.
safe_config() {
	check_current_config

	info "Performing safe configuration, based on running kernel config and accepting upstream defaults ..."
	info "Running make olddefconfig"
	yes "" | make olddefconfig
}

# Configures built-in for current loaded modules using local config,
# then makes all new/optional stuff as modules
optimized_config() {
	check_current_config
	
	info "Performing an optimized configuration. This is experimental!!!"
	info "You should have all hardware you want to use pluged, so the current"
	info "kernel will load the modules and they will be included in this build."

	cp /boot/config-$( uname -r ) .config -v
	make localmodconfig
}

local_version() {
	VERSION="$(grep "CONFIG_LOCALVERSION=" .config | cut -f 2 -d '=' | sed -e 's;-;+;g' |\
		sed -e 's;";;g' | sed -e 's;^+;;g')"
	if [ ! -z "$VERSION" ] ; then
		echo "$VERSION~"
	else
		echo ""
	fi
}

# Starts the kernel build process
build_packages() {
	case $KVER in
		*-*)
			REV="${KVER/-/\~}~$(local_version)custom$BUILD"
			;;
		*)
			REV="$KVER~$(local_version)custom$BUILD"
			;;
	esac
	
	info "Your kernel will be compiled now."
	info "You may want to take one coffee. Or maybe two ..."
	info "Your kernel revision will be $REV"

	# This is needed to avoid trying to use debian/keys
	sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config

	# Run and account used time with the GNU time command	
	LOG="../linux-image-$REV.log"
	\time -o $LOG.time -f "Build time for the package: %E" \
		make bindeb-pkg \
		$BUILD_ARGS \
		EXTRAVERSION="-amd64" \
		KDEB_PKGVERSION=$(make kernelversion)-$REV \
		DEBEMAIL='ronoaldo@gmail.com' 2>&1 | tee $LOG
}

usage() {
	cat <<EOF
Usage $0 [OPTIONS]

Where OPTIONS can be:
	--kernel-version|-k
		Configures the kernel version (default=$KVER)
	--fast
		Enable multiple jobs in parallel. $(grep -c '^processor' /proc/cpuinfo) jobs
	--build-number|-b
		Enables a specific build number after 
		"~custom" on kernel package revision
	--safe-config
		Try to safely configure the kernel
	--optimal-config
		Try to make an optimized kernel configuration.
		You must have all modules loaded to help the configuration
		guess the right modules to include.
	--help
		Prints this help and ext
EOF
}

### Main ###

# Quick help
case $@ in --help|-h|-?) usage ; exit 1 ;; esac

# Parses the CLI options and configurations.
while [ $# -gt 0 ] ; do
	case $1 in
		--kernel-version|-k)
			shift
			export KVER="$1"
			info "Setting kernel version to $KVER"
		;;

		--fast)
			warn "Building with maximal usage of CPU!"
			export BUILD_ARGS="$BUILD_ARGS -j$(grep -c '^processor' /proc/cpuinfo)"
		;;

		--safe-config)
			info "Will perform safe-config"
			export SAFE_CONFIG=true
		;;
		--optimized-config|--optimal-config)
			info "Will perform optimized-config"
			export OPTIMIZED_CONFIG=true
		;;
		--build-number|-b)
			shift
			info "Build number is $1"
			export BUILD="$1"
		;;
		--cpus)
			shift
			info "Building with $1 cpus"
			export BUILD_ARGS="$BUILD_ARGS -j$1"
		;;
		*)
			echo "Unknown argument '$1'"
			usage
			exit 1
		;;
	esac
	shift
done

case $KVER in
	latest)
		info "Guessing latest stable kernel version ..."
		KVER="$(wget -o/dev/null -O - 'http://www.kernel.org/' | \
			sed -n '/stable:/{n;p;}' | head -n 1  | \
			sed -rn 's/.*>([0-9.]+)<.*/\1/p' )"
		export KVER
	;;
esac

# Configure and build
info "Building linux kernel version $KVER ..."

info "Checking source and build dependencies"
install_build_dependencies
fetch_kernel
unpack_kernel
cd linux-$KVER

info "Cleaning up kernel build tree (make distclean)"
backup_current_config
make distclean

info "Configuring the kernel"
if [ ! -z $SAFE_CONFIG ] ; then
	info "Automated config selected: safe config"
	safe_config
elif [ ! -z $OPTIMIZED_CONFIG ] ; then
	info "Automated config selected: optimized config"
	optimized_config
else
	info "No automated config selected. Configure the kernel manually"
fi
run_make_menuconfig

info "Building now ... this will take a long time"
build_packages
