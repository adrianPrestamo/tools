#!/bin/bash
#
# Screencast Recording Script using Libav tools
#
# Requires: libav-tools pulseaudio-utils x11-utils wmctrl
#
if [ x"$DEBUG" != x"" ] ; then
	set -e
	set -x
fi

# Global variables and setup
video="screencast-$(date +%Y%m%d-%H%M%S).mkv"
log="/tmp/${video}.log"

# Detect desktop dimensions
width="$(xwininfo -root | grep Width | awk '{print $2}')"
height="$(xwininfo -root | grep Height | awk '{print $2}')"
camera="/dev/video0"

# Launch webcam
start_camera() {
	if [ ! -e $camera ] ; then
		echo "[W] Unable to find $camera - skipping. Use CTRL+C to stop recording."
		return 1
	fi

	echo "[I] Launching Webcam ..."
	avplay \
		-f video4linux2 -video_size 320x240 \
		-window_title Camera $camera 1>> $log 2>> $log &
	export CAM_PID=$!
	echo -n "[I] Waiting for camera ..."
	while ! wmctrl -l | grep -q Camera ; do
		echo -n "."
		sleep 1
		# Check if camera is running 
		if ! ps $CAM_PID >/dev/null ; then
			echo "[E] Camera not running. Aborting."
			exit 1
		fi
	done
	echo
	# Position the camera window at the right-bottom corner
	wmctrl -r Camera -e 0,$(($width - 320)),$(($height - 300)),320,240
	wmctrl -r Camera -b add,above
}

find_audio_source() {
	LANG=C pactl list sources | grep 'Name:' | grep -E "$AUDIO_SOURCE_CONTAINS" | cut -f 2 -d':' |\
		while read input ; do echo -n '-f pulse -i ' "$input " ; done
}

# Launch avcocodec
start_capture() {
	cmd="avconv -y \
		$(find_audio_source) \
		-f x11grab -s ${width}x${height} -r 25 -i $DISPLAY \
		-acodec libvorbis -aq 3 \
		-vcodec libx264 -pre:0 lossless_ultrafast \
		-threads 0 $video"
	echo -e "[I] Starting capture with \n$cmd\n"
	$cmd 2>> $log >> $log &
	export REC_PID=$!
}

# Wait until camera is closed
wait_for_camera_close() {
	echo "[I] Recording... Close the camera window to finish."
	while wmctrl -l | grep -q Camera ; do
		sleep 1
		if ! ps $REC_PID >/dev/null ; then
			kill -9 $CAM_PID || true
			echo "[E] Recorder not running. Aborting ..."
			exit 2
		fi
	done
}

clean_up() {
	echo "[I] Cleaning up ..."
	[ x"$REC_PID" != x"" ] && kill -9 $REC_PID 2>/dev/null >/dev/null
	[ x"$CAM_PID" != x"" ] && kill -9 $CAM_PID 2>/dev/null >/dev/null
	if [ -e $video ] ; then
		echo "[I] Screencast recorded. Filename $video"
	fi
	echo "[I] See log output for details at $log"
}

usage() {
	cat <<EOF
Simple video screencast recording tool

Usage:

$(basename $0) [--no-camera|-n]

	--no-camera|-n
		Do not open video from $camera device.

	--no-audio|-m
		Do not record audio file.

	--audio-source
		Use the specified audio as source.
		Should be a pulse source name from
		'pactl list sources'.
EOF
}

# Triggered when exiting the script
trap "clean_up" 0

# Parse args
argc=$#
argv="$@"
AUDIO_SOURCE_CONTAINS=input
while [ $# -gt 0 ] ; do
	case $1 in
		--help|-h) usage ; exit 1 ;;
		--no-camera|-n) export USE_CAMERA=false ;;
		--no-audio|-m) export USE_AUDIO=false ;;
		--audio-source) shift; export AUDIO_SOURCE_CONTAINS=$1 ;;
	esac
	shift
done

# Main loop
if [ x"$USE_CAMERA" = x"false" ] ; then
	# Video only
	start_capture
	wait
else
	# Video + Camera, if available
	start_capture
	if start_camera ; then
		wait_for_camera_close
	else
		wait
	fi
fi
