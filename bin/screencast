#!/bin/bash
#
# Screencast Recording Script using Libav
#
if [ x"$DEBUG" != x"" ] ; then
	set -e
	set -x
fi

# Global variables and setup
video="screencast-$(date +%Y%m%d-%H%M%S).avi"

# Detect desktop dimensions
width="$(xwininfo -root | grep Width | awk '{print $2}')"
height="$(xwininfo -root | grep Height | awk '{print $2}')"

# Launch webcam
start_camera() {
	if [ ! -f /dev/video0 ] ; then
		echo "[W] Unable to find /dev/video0, skipping camera"
		return 1
	fi

	echo "[I] Launching avplay ..."
	avplay \
		-f video4linux2 -video_size 320x240 \
		-window_title Camera /dev/video0 >& /tmp/camera.log &
	export CAM_PID=$!
	echo -n "[I] Waiting for camera ..."
	while ! wmctrl -l | grep -q Camera ; do
		echo -n "."
		sleep 1
		# Check if camera is running 
		if ! ps $CAM_PID >/dev/null ; then
			echo "[E] Camera not running. Aborting."
			exit 1
		fi
	done
	echo
	# Position the camera window at the right-bottom corner
	wmctrl -r Camera -e 0,$(($width - 320)),$(($height - 300)),320,240
	wmctrl -r Camera -b add,above
}

# Launch avcocodec
start_capture() {
	echo "[I] Starting capture ..."
	avconv -y -f alsa -ac 2 -i pulse \
		-f x11grab -s ${width}x${height} -r 25 -i $DISPLAY \
		-acodec pcm_s16le ${video}.wav -an \
		-vcodec libx264 -pre lossless_ultrafast -threads 0 \
		$video >& /tmp/recording.log &
	export REC_PID=$!
}

# Wait until camera is closed
wait_for_camera_close() {
	echo "[I] Recording... Close the camera window to finish."
	while wmctrl -l | grep -q Camera ; do
		sleep 1
		if ! ps $REC_PID >/dev/null ; then
			kill -9 $CAM_PID || true
			echo "[E] Recorder not running. Aborting ..."
			exit 2
		fi
	done
}

clean_up() {
	echo "[I] Cleaning up ..."
	[ x"$REC_PID" != x"" ] && kill -9 $REC_PID
	[ x"$CAM_PID" != x"" ] && kill -9 $CAM_PID
	echo "[I] Screencast recorded. Filename $video"
}

trap "clean_up" 0
#trap "clean_up" 2
#trap "clean_up" 9

case $1 in
	--no-camera|-n)
		start_capture
		wait
		;;
	*)
		start_capture
		if start_camera ; then
			wait_for_camera_close
		else
			wait
		fi
		;;
esac
